{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["TWITTER_HANDLE","TWITTER_LINK","CONTRACT_ADDRESS","App","useState","currentAccount","setCurrentAccount","tokenId","setTokenId","setupEventListener","window","ethereum","request","method","chainId","console","log","alert","provider","ethers","providers","Web3Provider","signer","getSigner","Contract","myEpicNft","abi","on","from","message","showNFT","url","open","checkIfWalletIsConnected","accounts","length","account","useEffect","connectWallet","askContractToMintNft","connectedContract","makeAnEpicNFT","nftTxn","wait","hash","className","onClick","alt","src","twitterLogo","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3351437d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.a8a75254.svg\";","import './styles/App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport React from \"react\";\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport myEpicNft from './utils/MyEpicNFT.json';\n\n// Constants\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = '';\nconst TOTAL_MINT_COUNT = 50;\nconst CONTRACT_ADDRESS = \"0xf4BFB4A51c0B7A486d610c3c03ad0978b51203d0\";\n\nconst App = () => {\n\n  /*\n   * Just a state variable we use to store our user's public wallet. Don't forget to import useState.\n  */\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n\n  const [tokenId, setTokenId] = useState(-1);\n\n  // Setup our listener.\n  const setupEventListener = async () => {\n    // Most of this looks the same as our function askContractToMintNft\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n\n        let chainId = await ethereum.request({ method: 'eth_chainId' });\n        console.log(\"Connected to chain \" + chainId);\n  \n        // String, hex code of the chainId of the Goerli test network\n        const goerliChainId = \"0x5\"; \n        if (chainId !== goerliChainId) {\n          alert(\"You are not connected to the Goerli Test Network!\");\n        }\n\n        // Same stuff again\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n\n        // THIS IS THE MAGIC SAUCE.\n        // This will essentially \"capture\" our event when our contract throws it.\n        // If you're familiar with webhooks, it's very similar to that!\n        connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId, message) => {\n          console.log(from, message)\n          setTokenId (tokenId);\n          //alert(`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`)\n        });\n\n        console.log(\"Setup event listener!\")\n\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const showNFT = () => {\n    console.log(\"shownft\");\n    const url = `https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId}`;\n    console.log(url);\n    window.open(url, '_blank', 'noopener,noreferrer');\n  }\n\n  const isMinted = () => {\n    return (tokenId != -1);\n  }\n\n  const checkIfWalletIsConnected = async () => {\n    /*\n    * First make sure we have access to window.ethereum\n    */\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    }\n   /*\n    * Check if we're authorized to access the user's wallet\n    */\n   const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n   /*\n   * User can have multiple authorized accounts, we grab the first one if its there!\n   */\n   if (accounts.length !== 0) {\n     const account = accounts[0];\n     console.log(\"Found an authorized account:\", account);\n     setCurrentAccount(account);\n     setupEventListener();\n   } else {\n     console.log(\"No authorized account found\");\n   }\n }\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, [])\n\n  /*\n  * Implement your connectWallet method here\n  */\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      /*\n      * Fancy method to request access to account.\n      */\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      /*\n      * Boom! This should print out public address once we authorize Metamask.\n      */\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]); \n      // Setup listener! This is for the case where a user comes to our site\n      // and ALREADY had their wallet connected + authorized.\n      setupEventListener()\n\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  // Render Methods\n  const renderNotConnectedContainer = () => (\n    <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n      Connect to Wallet\n    </button>\n  );\n\n  const renderShowNFTContainer = () => {\n    if (currentAccount === \"\" || !isMinted()) return null;\n    return (\n      <button onClick={showNFT} className=\"cta-button show-nft-button\">\n        Show NFT\n      </button>\n    );\n  }\n  \n  const askContractToMintNft = async () => {\n    try {\n      const { ethereum } = window;\n  \n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n  \n        console.log(\"Going to pop wallet now to pay gas...\")\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n  \n        console.log(\"Mining...please wait.\")\n        await nftTxn.wait();\n        \n        console.log(`Mined, see transaction: https://goerli.etherscan.io/tx/${nftTxn.hash}`);\n  \n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">My NFT Collection</p>\n          <p className=\"sub-text\">\n            Each unique. Each beautiful. Discover your NFT today.\n          </p>\n          {currentAccount === \"\" ? (\n            renderNotConnectedContainer()\n          ) : (\n            <button onClick={askContractToMintNft} className=\"cta-button connect-wallet-button\">\n              Mint NFT\n            </button>    \n          )}\n          {renderShowNFTContainer()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}